<#@ template debug="false" hostspecific="false" language="C#" #>

<#@ assembly name="System.Core" #>
<# // TODO: Trying to make sure WE use System.Linq for generation #>
<#@ assembly name="FastLinq.dll" alias="FL" #>

<#@ import namespace="global::System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #>

<#@ output extension=".cs" #>

<#

var publicMethods = typeof(FastLinq)
	.GetMethods(
		BindingFlags.Static
		| BindingFlags.Public
		| BindingFlags.NonPublic);

var knownArguments = new Dictionary<Type, List<string>>
{
	[typeof(IReadOnlyCollection<>)] = new List<string>
	{
		"(IReadOnlyCollection<int>)null",
		"(IReadOnlyCollection<int>)new List<int>()",
		"(IReadOnlyCollection<int>)new HashSet<int>{ default(int) }",
		"(IReadOnlyCollection<int>)new int[] { default(int), default(int), default(int) }",
        "(IReadOnlyCollection<int>)(new List<int>{ 1, 2, 3 }).AsReadOnly()",
	},
	[typeof(IList<>)] = new List<string>
	{
		"(IList<int>)null",
		"(IList<int>)new List<int>()",
		"(IList<int>)new int[] { default(int), default(int), default(int) }",
	},
	[typeof(IReadOnlyList<>)] = new List<string>
	{
		"(IReadOnlyList<int>)null",
		"(IReadOnlyList<int>)new List<int>()",
		"(IReadOnlyList<int>)new int[] { default(int), default(int), default(int) }",
	},
};

Func<Type, List<string>> getArgumentsForType = 
	type =>
	{
		if (type.IsGenericType)
		{
			if (knownArguments.TryGetValue(type.GetGenericTypeDefinition(), out List<string> values))
			{
				return values;
			}
		}
		else
		{
			if (type.IsArray)
			{
				return new[]
					{
						"(int[])(null)",
						"(int[])(new int[] {})",
						"(int[])(new[] { 1, 2, 3 })",
					}.ToList();
			}
		}

		return null;
	};

var supportedMethods = publicMethods

	// Only single argument methods
	.Where(m => m.GetParameters().Count() == 1)

	// Nothing like 'cast'
	.Where(m => m.ContainsGenericParameters && m.GetGenericArguments().Count() == 1)

	// Exclude non-Enumerable methods
	.Where(m => !new[] { "ToLazyList", "AsReadOnly" }.Contains(m.Name))

	.Where(m => {
		var paramType = m.GetParameters().Single().ParameterType;
		return getArgumentsForType(paramType) != null;
	})
	.ToList();
#>

namespace Test.Generated
{
    using System;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;

    using FluentAssertions;

    using Microsoft.VisualStudio.TestTools.UnitTesting;

    [TestClass]
	public class SingleGenericParameter_SingleInput_SameResultAsEnumerable_Tests
	{
		<#
		foreach (var method in supportedMethods)
		{
		#>
			<# 
			foreach (var arg in getArgumentsForType(method.GetParameters().Single().ParameterType))
			{
			#>

		[TestMethod]
		public void <#= Regex.Replace($"{method.Name}_{arg}", @"[\(\)\[\][<\>\s\{\}\,\.]", "_") #>()
		{
			EnsureResultOrExceptionSame(
				<#= arg #>,
				input => Enumerable.<#= method.Name #>(input),
				input => FastLinq.<#= method.Name #>(input));
		}
			<# } #>
		<#
		}
		#>

        private static void EnsureResultOrExceptionSame<TIn, TOut>(
            TIn data,
            Func<TIn, TOut> first,
            Func<TIn, TOut> second)
        {
            var firstResult = Run(data, first);
            var secondResult = Run(data, second);

            new
                {
                    secondResult.Item1,
                    exceptionType = secondResult.Item2?.GetType(),
                    exceptionMessage = secondResult.Item2?.Message
                }.Should()
                .BeEquivalentTo(
                    new
                    {
                        firstResult.Item1,
                        exceptionType = firstResult.Item2?.GetType(),
                        exceptionMessage = firstResult.Item2?.Message
                    });
        }

        private static (TOut, Exception) Run<TIn, TOut>(
            TIn data,
            Func<TIn, TOut> func)
        {
            try
            {
                var ret = func(data);
                return (ret, null);
            }
            catch (Exception e)
            {
                return (default(TOut), e);
            }
        }
	}
}